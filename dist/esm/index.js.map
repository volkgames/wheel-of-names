{"version":3,"file":"index.js","sources":["../../src/utils.ts","../../node_modules/style-inject/dist/style-inject.es.js","../../src/WheelOfNames.tsx"],"sourcesContent":["export const drawEllipse = (\r\n  context: CanvasRenderingContext2D,\r\n  cx: number,\r\n  cy: number,\r\n  rx: number,\r\n  ry: number,\r\n  fill: string,\r\n) => {\r\n  context.save();\r\n  context.beginPath();\r\n  context.translate(cx - rx, cy - ry);\r\n  context.scale(rx, ry);\r\n  context.arc(1, 1, 1, 0, 2 * Math.PI, false);\r\n  context.fillStyle = fill;\r\n  context.fill();\r\n  context.closePath();\r\n  context.restore();\r\n};\r\n\r\nexport const drawPieSlice = (\r\n  context: CanvasRenderingContext2D,\r\n  cx: number,\r\n  cy: number,\r\n  radius: number,\r\n  startAngle: number,\r\n  endAngle: number,\r\n  clockwise: boolean,\r\n  style: string,\r\n  fill: boolean,\r\n) => {\r\n  context.save();\r\n  context.beginPath();\r\n  context.moveTo(cx, cy);\r\n  context.arc(\r\n    cx,\r\n    cy,\r\n    radius,\r\n    deg2Rad(startAngle),\r\n    deg2Rad(endAngle),\r\n    clockwise,\r\n  );\r\n  context.lineTo(cx, cy);\r\n  if (fill) {\r\n    context.fillStyle = style;\r\n    context.fill();\r\n  } else {\r\n    context.strokeStyle = style;\r\n    context.stroke();\r\n  }\r\n  context.restore();\r\n};\r\n\r\nexport const drawSpike = (\r\n  context: CanvasRenderingContext2D,\r\n  angle: number,\r\n  x1: number,\r\n  y1: number,\r\n  x2: number,\r\n  y2: number,\r\n  x3: number,\r\n  y3: number,\r\n  style: string,\r\n) => {\r\n  context.save();\r\n  context.rotate(deg2Rad(angle));\r\n  context.beginPath();\r\n  context.moveTo(x1, y1);\r\n  context.lineTo(x2, y2);\r\n  context.lineTo(x3, y3);\r\n  context.fillStyle = style;\r\n  context.closePath();\r\n  context.fill();\r\n  context.strokeStyle = \"#000\";\r\n  // context.stroke();\r\n  context.restore();\r\n};\r\n\r\nexport const clearCanvasBlank = (\r\n  canvas: HTMLCanvasElement,\r\n  context: CanvasRenderingContext2D,\r\n) => context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\nexport const deg2Rad = (degs: number) => (degs * Math.PI) / 180;\r\n\r\nexport const getRandom = () => Math.random();\r\n\r\nexport const getRandomRange = (min: number, max: number) =>\r\n  min + max * getRandom();\r\n\r\nexport const getRandomRangeWhole = (min: number, max: number) =>\r\n  Math.round(getRandomRange(min + 1, max - 1)) - 1;\r\n\r\nexport const getRandomizedList = <T>(arr: T[]) =>\r\n  arr.sort(() => 0.5 * Math.random());\r\n\r\nexport const getSpinAmount = (min: number, max: number) => {\r\n  return getRandomRangeWhole(360 * min, 360 * max);\r\n};\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { forwardRef, useRef, useImperativeHandle, useEffect, FC } from \"react\";\r\nimport {\r\n  clearCanvasBlank,\r\n  drawEllipse,\r\n  deg2Rad,\r\n  drawPieSlice,\r\n  drawSpike,\r\n  getSpinAmount,\r\n} from \"./utils\";\r\nimport { WheelOfNamesProps } from \"./WheelOfNames.types\";\r\nimport \"./WheelOfNames.css\";\r\n\r\nconst COLORS = [\"#3369e8\", \"#d50f25\", \"#eeb211\", \"#009925\", \"#000000\"];\r\n\r\nconst WheelOfNames: FC<WheelOfNamesProps> = ({\r\n  size = 300,\r\n  list,\r\n  minSpins = 1,\r\n  maxSpins = 5,\r\n  fps = 14,\r\n  onComplete,\r\n  colors = COLORS,\r\n  fontColor = \"#fff\",\r\n  fontFamily = \"Arial\",\r\n  backgroundColor = \"#fff\",\r\n  pointerColor = \"#fff\",\r\n  highlightColor = \"rgba(255,100,100,0.5)\",\r\n  fontSize = 20,\r\n  tickSound,\r\n  winSound,\r\n  tickPlaybackRate = 4,\r\n  winPlaybackRate = 1,\r\n  onClick = true,\r\n}) => {\r\n  const wheelCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const foreCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const selectorCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const mainCanvasRef = useRef<HTMLCanvasElement>(null);\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n\r\n  const appRadius = size / 2;\r\n  const wheelRadius = appRadius - appRadius / 10;\r\n  const sliceSize = 360 / list.length;\r\n  let spinAngleEnd = -1;\r\n  let spinAngle = -1;\r\n  let spinRate = -1;\r\n  let spinAlt = -1;\r\n  let intervalHandle: NodeJS.Timeout | undefined;\r\n  let currentAudio: string | undefined;\r\n\r\n  const createWheel = () => {\r\n    if (!wheelCanvasRef.current) return;\r\n    const wheelCanvas = wheelCanvasRef.current;\r\n    const wheelContext = wheelCanvasRef.current.getContext(\"2d\");\r\n    if (!wheelContext) return;\r\n    clearCanvasBlank(wheelCanvas, wheelContext);\r\n    drawEllipse(\r\n      wheelContext,\r\n      appRadius,\r\n      appRadius,\r\n      wheelRadius,\r\n      wheelRadius,\r\n      backgroundColor\r\n    );\r\n    let fillStyle: string;\r\n    wheelContext.font = `${\r\n      fontSize ?? sliceSize * (wheelRadius / appRadius)\r\n    }pt ${fontFamily}`;\r\n    wheelContext.textBaseline = \"middle\";\r\n    for (let i = 0, j = 0; i < list.length; i++) {\r\n      wheelContext.save();\r\n      wheelContext.translate(appRadius, appRadius);\r\n      wheelContext.rotate(deg2Rad(90 - sliceSize * i));\r\n      wheelContext.translate(-appRadius, -appRadius);\r\n      if (j == colors.length) {\r\n        j = 0;\r\n      }\r\n      fillStyle = colors[j];\r\n      j++;\r\n\r\n      // ! this may can take away\r\n      // if (i === list.length - 1) {\r\n      //   let rand = fillStyle;\r\n\r\n      //   fillStyle = rand;\r\n      // }\r\n      drawPieSlice(\r\n        wheelContext,\r\n        appRadius,\r\n        appRadius,\r\n        wheelRadius - wheelRadius / 50,\r\n        180 - sliceSize / 2,\r\n        180 + sliceSize / 2,\r\n        false,\r\n        fillStyle,\r\n        true\r\n      );\r\n      wheelContext.save();\r\n      wheelContext.fillStyle = fontColor;\r\n      wheelContext.fillText(\r\n        list[i],\r\n        (appRadius - wheelRadius) * 2,\r\n        appRadius,\r\n        (appRadius - wheelRadius) * 6\r\n      );\r\n      wheelContext.restore();\r\n      wheelContext.restore();\r\n    }\r\n  };\r\n\r\n  const createPointer = () => {\r\n    if (!foreCanvasRef.current) return;\r\n    const foreCanvas = foreCanvasRef.current;\r\n    const foreContext = foreCanvas.getContext(\"2d\");\r\n    if (!foreContext) return;\r\n    clearCanvasBlank(foreCanvas, foreContext);\r\n    const factor = 10;\r\n    drawEllipse(\r\n      foreContext,\r\n      appRadius,\r\n      appRadius,\r\n      wheelRadius / factor,\r\n      wheelRadius / factor,\r\n      pointerColor\r\n    );\r\n    foreContext.save();\r\n    foreContext.translate(appRadius, appRadius);\r\n    foreContext.rotate(deg2Rad(180));\r\n    const pegSize = appRadius / 20;\r\n    drawSpike(\r\n      foreContext,\r\n      0,\r\n      pegSize,\r\n      pegSize,\r\n      0,\r\n      pegSize * 6,\r\n      -pegSize,\r\n      pegSize,\r\n      pointerColor\r\n    );\r\n    foreContext.restore();\r\n  };\r\n\r\n  const drawStage = () => {\r\n    if (!mainCanvasRef.current) return;\r\n    const mainCanvas = mainCanvasRef.current;\r\n    const mainContext = mainCanvas.getContext(\"2d\");\r\n    if (!mainContext) return;\r\n    clearCanvasBlank(mainCanvas, mainContext);\r\n    const half = size / 2;\r\n    mainContext.save();\r\n    mainContext.translate(half, half);\r\n    mainContext.rotate(deg2Rad(spinAngle));\r\n    mainContext.translate(-half, -half);\r\n    if (!wheelCanvasRef.current) return;\r\n    mainContext.drawImage(wheelCanvasRef.current, 0, 0);\r\n    mainContext.restore();\r\n    if (!selectorCanvasRef.current) return;\r\n    mainContext.drawImage(selectorCanvasRef.current, 0, 0);\r\n    if (!foreCanvasRef.current) return;\r\n    mainContext.drawImage(foreCanvasRef.current, 0, 0);\r\n  };\r\n\r\n  const highlightWinner = (finishedAngle: number) => {\r\n    finishedAngle = -finishedAngle;\r\n    const angle = finishedAngle % 360;\r\n    const rawResult = angle / sliceSize;\r\n    let result = Math.round(rawResult);\r\n    const i = result;\r\n    if (result < 0) {\r\n      result = result - (result + result);\r\n    }\r\n\r\n    if (result >= list.length) {\r\n      result -= list.length;\r\n    }\r\n\r\n    const sliceOffset = sliceSize / 2 + i * sliceSize;\r\n    const startAngle = 270 - (angle - sliceOffset);\r\n    const endAngle = startAngle - sliceSize;\r\n    const style = highlightColor;\r\n    const clockwise = true;\r\n    const fill = true;\r\n    if (!selectorCanvasRef.current) return;\r\n    const selectorCanvas = selectorCanvasRef.current;\r\n    const selectorContext = selectorCanvas.getContext(\"2d\");\r\n    if (!selectorContext) return;\r\n    selectorContext.lineWidth = wheelRadius / 20;\r\n    selectorContext.setLineDash([selectorContext.lineWidth]);\r\n    drawPieSlice(\r\n      selectorContext,\r\n      appRadius,\r\n      appRadius,\r\n      wheelRadius - wheelRadius / 50,\r\n      startAngle,\r\n      endAngle,\r\n      clockwise,\r\n      style,\r\n      fill\r\n    );\r\n    createPointer();\r\n    drawStage();\r\n    if (audioRef.current && winSound) {\r\n      audioRef.current.src = winSound;\r\n      audioRef.current.playbackRate = winPlaybackRate;\r\n      audioRef.current.play();\r\n    }\r\n    if (onComplete) {\r\n      onComplete(list[result]);\r\n    }\r\n  };\r\n\r\n  const animateWheel = () => {\r\n    if (spinAngleEnd < 0) {\r\n      spinAngleEnd = getSpinAmount(minSpins, maxSpins);\r\n      spinAngle = 0;\r\n      spinRate = 10;\r\n      spinAlt = 0.15;\r\n      intervalHandle = setInterval(() => animateWheel(), 1000 / fps);\r\n      return;\r\n    }\r\n\r\n    if (spinAngle > spinAngleEnd - 360) {\r\n      spinRate -= spinAlt;\r\n      if (spinRate < 1) {\r\n        spinRate = 1;\r\n      }\r\n    }\r\n\r\n    const angle = (spinAngle % 360) + sliceSize / 2;\r\n    const distanceFromPeg = Math.round(angle % sliceSize);\r\n    if (distanceFromPeg < sliceSize && distanceFromPeg > sliceSize - 5) {\r\n      if (audioRef.current && tickSound) {\r\n        audioRef.current.src = tickSound;\r\n        audioRef.current.playbackRate = tickPlaybackRate;\r\n        audioRef.current.play();\r\n      }\r\n    }\r\n\r\n    spinAngle += spinRate;\r\n\r\n    if (spinAngle > spinAngleEnd) {\r\n      clearInterval(intervalHandle);\r\n      // * uncomment if needed\r\n      // createPointer();\r\n      drawStage();\r\n      highlightWinner(spinAngle);\r\n      spinAngleEnd = -1;\r\n    } else {\r\n      // * uncomment if needed\r\n      // createPointer();\r\n      drawStage();\r\n    }\r\n  };\r\n\r\n  const startW = () => {\r\n    if (spinAngle < spinAngleEnd) return;\r\n    // createWheel();\r\n    if (!selectorCanvasRef.current) return;\r\n    const selectorCanvas = selectorCanvasRef.current;\r\n    const selctorContext = selectorCanvas.getContext(\"2d\");\r\n    if (!selctorContext) return;\r\n    clearCanvasBlank(selectorCanvas, selctorContext);\r\n    animateWheel();\r\n  };\r\n\r\n  useEffect(() => {\r\n    createWheel();\r\n    createPointer();\r\n    drawStage();\r\n  }, [list, size, fontSize]);\r\n\r\n  const displayNoneStyle = {\r\n    display: \"none\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"canvas-container\">\r\n      <canvas\r\n        width={size}\r\n        height={size}\r\n        ref={wheelCanvasRef}\r\n        style={displayNoneStyle}\r\n      />\r\n      <canvas\r\n        width={size}\r\n        height={size}\r\n        ref={foreCanvasRef}\r\n        style={displayNoneStyle}\r\n      />\r\n      <canvas\r\n        width={size}\r\n        height={size}\r\n        ref={selectorCanvasRef}\r\n        style={displayNoneStyle}\r\n      />\r\n      <canvas\r\n        width={size}\r\n        height={size}\r\n        ref={mainCanvasRef}\r\n        style={{\r\n          cursor: onClick ? \"pointer\" : \"default\",\r\n          width: size,\r\n          height: size,\r\n        }}\r\n        onClick={() => {\r\n          if (onClick) startW();\r\n        }}\r\n      />\r\n      {currentAudio ?? <audio src={currentAudio} ref={audioRef} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nWheelOfNames.displayName = \"WheelOfNames\";\r\n\r\nexport default WheelOfNames;\r\n"],"names":["drawEllipse","context","cx","cy","rx","ry","fill","save","beginPath","translate","scale","arc","Math","PI","fillStyle","closePath","restore","drawPieSlice","radius","startAngle","endAngle","clockwise","style","moveTo","deg2Rad","lineTo","clearCanvasBlank","canvas","clearRect","width","height","degs","getRandomRange","min","max","random","getSpinAmount","round","getRandomRangeWhole","css","ref","insertAt","document","head","getElementsByTagName","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","COLORS","WheelOfNames","_a","intervalHandle","_b","size","list","_c","minSpins","_d","maxSpins","_e","fps","onComplete","_f","colors","_g","fontColor","_h","fontFamily","_j","backgroundColor","_k","pointerColor","_l","highlightColor","_m","fontSize","tickSound","winSound","_o","tickPlaybackRate","_p","winPlaybackRate","_q","onClick","wheelCanvasRef","useRef","foreCanvasRef","selectorCanvasRef","mainCanvasRef","audioRef","appRadius","wheelRadius","sliceSize","length","spinAngleEnd","spinAngle","spinRate","spinAlt","createPointer","current","foreCanvas","foreContext","getContext","rotate","angle","x1","y1","x2","y2","x3","y3","pegSize","strokeStyle","drawStage","mainCanvas","mainContext","half","drawImage","animateWheel","setInterval","distanceFromPeg","src","playbackRate","play","clearInterval","finishedAngle","rawResult","result","i","selectorContext","lineWidth","setLineDash","highlightWinner","useEffect","wheelCanvas","wheelContext","font","concat","textBaseline","j","fillText","createWheel","displayNoneStyle","display","_jsxs","className","children","_jsx","cursor","selectorCanvas","selctorContext","startW","currentAudio","displayName"],"mappings":"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","x_google_ignoreList":[1]}